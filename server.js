const express = require("express");
const rbx = require("noblox.js");
const app = express();

app.use(express.json());

const groupId = 15049970; // Replace with your Group Id
const cookie = "_0A6ABC454FCC9495FDBE140B26F3068E49A39D12EA0F04547C99BA699012036AC3CEFDC9137D7B984751F133812916F5A6442ADF792E40EB1C67DA8F8289505802AA0359CDC9E7B8DDDC97BED38B2B9BF8899E7C87E9ABE918D7FA8BEF9CBA761F329BE9665CFAF830913BCC30222843818A25BBF6C2D185264D977657FF0688BE825F42A38C6CC394CDF6EDEF41634658CB4A6B4969D35392992963B7F087A1211A57CF139D386D1F978DB7F0ABEEFF7F4AF29197FEC6011E669BF604522791E5FB73AA7A6EB15E6B46BF38A8ACDC58DD486AF32E061B7E8D6F5E196F46CFF7BC2BFAFB4A661C975550E612C657437345A15BB1740047B82F695DC06418FBCA411F01AA6D8CB4DAFE932A9210AB182C43C77F42EACB08EF7C4E98202031FA40877011C505A784279CF5ED8A312BB81E41D621E0452E0FCB33F826AB4ED930B4F2742678BA58A607AFDCBFA7957310EC5C9FC119A293D037E714875A87F6A1BFF78D5B5ED30F73ABD7B5A408FDE2EE43A80A9DAC836B45FD6F3FFA2C2073068897EEBFE2164502DD6BAFFB9A72352CD7EA4762D823805C184C35C45C88653C36C72DC0C5BE77297755201BD39F4A08562C443BE96E8539A9137E4588647C499FDEE9B188799675393B8AD787F8D913F202DDDDC8589DC9A31895D573C365B97D022C7F407FDD1CC390646B1BC1FA15D9CC7FD3792929729AB358881F48348A6D1984FBFEC79D8BBA028CAE460998E9C1E2C4A97CFDC285B3B384DFA6332EE8780EFA4627188C151D4A54D43E4FA6691A5B826D665C598B73E62C239098BB82476083FF3366C20337C897EAA4D35D7C44D08A5DCC9279EE5DBBC71C9BE1FDA4CED274E10E98B806A76D3CAA9E6F878624309EA564A63BBCD118AEAA87D5830B9CC0C3E18BDC0B34A5897C24FC7FAB61616790CE46B15AFA3E714EF4D337B102A8675E23BF230638175C206A8C7824FAFC1020730C8C2036251621EC084671A4FEFA8648F28F4E87D528FD4E099A030F2EAFE800130DB38F2A14A6E242E05815CE08DED4D5"; // Replace with your account cookie

// honor amount: roleid
const honorRanks = {
  0: 102794177,
  1: 84972954,
  5: 85150886,
  10: 89383841,
  15: 85006910,
  20: 85006940,
  30: 84972953,
  40: 90562516,
  50: 91138752,
  70: 87676269,
  90: 34706580,
  120: 102794281,
  150: 89896768
};

app.post("/ranker", async (req, res) => {
  const { userid, honor } = req.body;

  // Validate input
  if (!userid || !honor || typeof userid !== 'number' || typeof honor !== 'number') {
    return res.status(400).json({ error: "Invalid input." });
  }

  // Determine the role ID based on honor
  let roleId;
  for (let [threshold, id] of Object.entries(honorRanks).reverse()) {
    if (honor >= threshold) {
      roleId = id;
      break;
    }
  }

  if (!roleId) {
    return res.status(400).json({ error: "Invalid honor level." });
  }

  try {
    await rbx.setCookie(cookie);
    await rbx.setRank(groupId, parseInt(userid), roleId);
    res.json({ message: "Rank updated successfully!" });
  } catch (err) {
    console.error("Failed to set rank: ", err);
    res.status(500).json({ error: "Failed to set rank." });
  }
});

const listener = app.listen(process.env.PORT || 3000, () => {
  console.log("Your app is listening on port " + listener.address().port);
});
